{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red153\green168\blue186;
\red254\green187\blue91;\red88\green118\blue71;\red109\green109\blue109;\red133\green96\blue154;\red81\green136\blue67;
\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c31765\c53333\c26275;
\csgenericrgb\c33725\c51765\c67843;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 var \cf4 utilities = \cf5 require\cf4 (\cf6 '../utilities/common'\cf4 )\cf2 ;\
\
\cf7 //express to make rest API\
\cf2 var \cf8 express \cf4 = \cf5 require\cf4 (\cf6 'express'\cf4 )\cf2 ;\
var \cf4 router = \cf8 express\cf4 .\cf5 Router\cf4 ()\cf2 ;\
\

\f1\i \cf9 /*********** export router to make callable from server.js **************/\

\f0\i0 \cf4 module.\cf8 exports \cf4 = router\cf2 ;\
\
\
\cf7 //get mapping\
//endpoint configuration\
// example: http://localhost:3000/weather/current/torrebruna/ch/EN/units=imperial\
\cf4 router.get(\cf6 '/:city/:prov/:language/units=:units'\cf2 , function \cf4 (request\cf2 , \cf4 response) \{\
\
    \cf2 let \cf4 param1 = request.\cf8 params\cf4 .\cf8 city\cf2 ;\
    let \cf4 cty = param1.\cf5 charAt\cf4 (\cf10 0\cf4 ).\cf5 toUpperCase\cf4 () + param1.\cf5 substring\cf4 (\cf10 1\cf4 )\cf2 ; \cf7 //normalize (cetemps need to read city with fist letter upper case)\
\
    \cf2 let \cf4 param2 = request.\cf8 params\cf4 .prov\cf2 ;\
    let \cf4 prv = param2.\cf5 toUpperCase\cf4 ()\cf2 ;\
\
    let \cf4 language = request.\cf8 params\cf4 .\cf8 language\cf2 ;\
    let \cf4 units = request.\cf8 params\cf4 .units\cf2 ;\
\
    \cf7 // url of cetemps\
    \cf2 let \cf4 URL = utilities.\cf5 buildURL\cf4 (cty\cf2 ,\cf4 prv)\cf2 ;\
\
    const \cf5 Nightmare \cf4 = \cf5 require\cf4 (\cf6 'nightmare'\cf4 )\cf2 ;\
    const \cf4 nightmare = \cf5 Nightmare\cf4 (\{\cf8 show\cf4 : \cf2 false\cf4 \})\cf2 ; \cf7 //if show:true i can see the operation of the bot\
\
\
    \cf4 nightmare\
        .\cf5 goto\cf4 (URL) \cf7 //web site to visit\
        \cf4 .\cf5 wait\cf4 (\cf6 'tr'\cf4 ) \cf7 //what have to wait to start execution\
        \cf4 .\cf5 evaluate\cf4 (\cf2 function \cf4 (lang\cf2 , \cf4 units\cf2 , \cf4 conditionIT\cf2 , \cf4 conditionEN) \{ \cf7 //execution --> I take the data I need through the HTML tags and classes\
\
            \cf2 const \cf4 days = [\cf6 'Domenica'\cf2 , \cf6 'Lunedi'\cf2 , \cf6 'Martedi'\cf2 , \cf6 'Mercoledi'\cf2 , \cf6 'Giovedi'\cf2 , \cf6 'Venerdi'\cf2 , \cf6 'Sabato'\cf4 ]\cf2 ;\
            const \cf4 months = [\cf6 'Gennaio'\cf2 , \cf6 'Febbraio'\cf2 , \cf6 'Marzo'\cf2 , \cf6 'Aprile'\cf2 , \cf6 'Maggio'\cf2 , \cf6 'Giugno'\cf2 , \cf6 'Luglio'\cf2 , \cf6 'Agosto'\cf2 , \cf6 'Settembre'\cf2 , \cf6 'Ottobre'\cf2 , \cf6 'Novembre'\cf2 , \cf6 'Dicembre'\cf4 ]\cf2 ;\
\
            let \cf4 res = \{\}\cf2 ;\
            let \cf4 weather = \{\}\cf2 ;\
\
            \cf7 //city name\
            \cf2 let \cf4 city = document.\cf5 querySelector\cf4 (\cf6 'tr > td[align="center"][bgcolor="#0a51a1"][colspan="6"] > font[color="#FFFFFF"] > div[align="left"]'\cf4 )\cf2 ;\
            \cf7 //check if city is valid\
            \cf2 if \cf4 (city != \cf2 null\cf4 ) \{\
                \cf2 let \cf4 strPlit = city.\cf8 innerText\cf4 .\cf5 split\cf4 (\cf6 " "\cf4 )\cf2 ;\
                \cf4 res.\cf8 cityName \cf4 = strPlit[\cf10 0\cf4 ]\cf2 ; \cf7 //nome\
                \cf4 res.\cf8 cityProvince \cf4 = strPlit[\cf10 1\cf4 ]\cf2 ; \cf7 //provincia\
                \cf2 if \cf4 (units == \cf6 'metric'\cf4 ) \{ \cf7 //height(m)\
                    \cf4 res.\cf8 cityHeight \cf4 = strPlit[\cf10 2\cf4 ] + \cf6 'm'\cf2 ;\
                \cf4 \}\
                \cf2 else if \cf4 (units == \cf6 'imperial'\cf4 ) \{ \cf7 //height(ft)\
                    \cf2 let \cf4 heightImperial = Math.\cf5 round\cf4 (\cf5 parseInt\cf4 (strPlit[\cf10 2\cf4 ]))\cf2 ;\
                    \cf4 res.\cf8 cityHeight \cf4 = \cf6 `\cf4 $\{heightImperial * \cf10 3.281\cf4 \}\cf6 ft`\cf2 ;\
                \cf4 \}\
            \} \cf2 else \cf4 \{\
                \cf2 throw \cf6 'city is not valid'\cf2 ;\
            \cf4 \}\
\
            \cf2 let \cf4 currentDate = \cf2 new \cf4 Date()\cf2 ;\
            let \cf4 currentHour = currentDate.\cf5 getHours\cf4 ()\cf2 ;\
            let \cf4 currentMonth = currentDate.\cf5 getMonth\cf4 ()\cf2 ;\
            let \cf4 currentDayOfWeek = currentDate.\cf5 getDay\cf4 ()\cf2 ;\
            let \cf4 currentDay = currentDate.\cf5 getDate\cf4 ()\cf2 ;\
\
            \cf7 //every row\
            \cf4 document.\cf5 querySelectorAll\cf4 (\cf6 'tr[bgcolor="#0a51a1"]'\cf4 ).\cf5 forEach\cf4 (\cf2 function \cf4 (result) \{\
                \cf7 //current row (day, hour)\
                \cf2 let \cf4 row = result.\cf8 children\cf4 [\cf10 0\cf4 ].\cf8 innerText\cf2 ;\
                let \cf4 splitted = row.\cf5 split\cf4 (\cf6 " "\cf4 )\cf2 ;\
                let \cf4 hourRow = splitted[\cf10 1\cf4 ]\cf2 ; \cf7 //ora\
                \cf2 let \cf4 dayRow = splitted[\cf10 3\cf4 ]\cf2 ; \cf7 //giorno\
                \cf2 let \cf4 dayNumRow = splitted[\cf10 4\cf4 ]\cf2 ; \cf7 //giorno numerico\
                \cf2 if \cf4 (dayNumRow.\cf5 charAt\cf4 (\cf10 0\cf4 ) == \cf6 '0'\cf4 ) \{\
                    dayNumRow = dayNumRow.\cf5 substring\cf4 (\cf10 1\cf4 )\cf2 ;\
                \cf4 \}\
                \cf2 let \cf4 monthRow = splitted[\cf10 5\cf4 ]\cf2 ; \cf7 //mese\
\
                //controlla giorno ed ora corrente\
                \cf2 if \cf4 ((hourRow == currentHour) && (months[currentMonth] == monthRow) && (days[currentDayOfWeek] == dayRow) && (dayNumRow == currentDay)) \{\
                    \cf2 let \cf4 temp = result.\cf8 children\cf4 [\cf10 1\cf4 ].\cf8 innerText\cf2 ;\
                    let \cf4 wind = result.\cf8 children\cf4 [\cf10 4\cf4 ].\cf5 querySelector\cf4 (\cf6 'b'\cf4 ).\cf8 innerText\cf2 ;\
                    if \cf4 (metric == \cf6 'C'\cf4 ) \{\
                        weather.\cf8 currentTemperature \cf4 = temp\cf2 ;\
                        \cf4 weather.\cf8 currentWind \cf4 = wind\cf2 ;\
                    \cf4 \}\
                    \cf2 else if \cf4 (metric == \cf6 'F'\cf4 ) \{\
                        \cf2 let \cf4 tempCelsius = \cf5 parseInt\cf4 (temp.\cf5 split\cf4 (\cf6 ''\cf4 )[\cf10 0\cf4 ])\cf2 ;\
                        let \cf4 tempFahrenheit = Math.\cf5 round\cf4 (((tempCelsius * \cf10 9\cf4 /\cf10 5\cf4 ) + \cf10 32\cf4 ))\cf2 ;\
                        \cf4 weather.\cf8 currentTemperature \cf4 = \cf6 `\cf4 $\{tempFahrenheit\}\cf6  \'b0F`\cf2 ;\
\
                        let \cf4 windMetric = \cf5 parseInt\cf4 (wind.\cf5 split\cf4 (\cf6 ' '\cf4 )[\cf10 0\cf4 ])\cf2 ;\
                        let \cf4 windImperial = Math.\cf5 round\cf4 (windMetric / \cf10 1.609\cf4 )\cf2 ;\
                        \cf4 weather.\cf8 currentWind \cf4 = \cf6 `\cf4 $\{windImperial\}\cf6  mph`\cf2 ;\
                    \cf4 \}\
\
                    weather.\cf8 currentPressure \cf4 = result.\cf8 children\cf4 [\cf10 2\cf4 ].\cf8 innerText\cf2 ;\
                    \cf4 weather.\cf8 currentHumidity \cf4 = result.\cf8 children\cf4 [\cf10 3\cf4 ].\cf8 innerText\cf2 ;\
\
                    let \cf4 img = result.\cf8 children\cf4 [\cf10 5\cf4 ].\cf5 querySelector\cf4 (\cf6 'img'\cf4 ).\cf8 src\cf2 ;\
                    let \cf4 imgSplit = img.\cf5 split\cf4 (\cf6 'icons/'\cf4 )\cf2 ;\
\
                    switch\cf4 (lang) \{\
                        \cf2 case \cf6 'IT'\cf4 :\
                            weather.\cf8 currentStatus \cf4 = conditionIT[imgSplit[\cf10 1\cf4 ]]\cf2 ;\
                            break;\
                        case \cf6 'EN'\cf4 :\
                            weather.\cf8 currentStatus \cf4 = conditionEN[imgSplit[\cf10 1\cf4 ]]\cf2 ;\
                            break;\
                        default\cf4 :\
                            weather.\cf8 currentStatus \cf4 = conditionIT[imgSplit[\cf10 1\cf4 ]]\cf2 ;\
                    \cf4 \}\
\
                    \cf2 return;\
                \cf4 \}\
            \})\cf2 ;\
\
            \cf4 res.\cf8 weather \cf4 = weather\cf2 ;\
            return \cf4 res\cf2 ;\
        \cf4 \}\cf2 , \cf4 language\cf2 , \cf4 units\cf2 , \cf4 utilities.status_it\cf2 , \cf4 utilities.status_en)\
        .\cf5 end\cf4 () \cf7 //end of execution\
        \cf4 .\cf5 then\cf4 (\cf2 function \cf4 (res) \{ \cf7 //post execution\
            \cf4 response.\cf8 statusCode \cf4 = \cf10 200\cf2 ;\
            \cf4 response.\cf5 send\cf4 (res)\cf2 ;\
        \cf4 \})\
        .\cf5 catch\cf4 (error => \{ \cf7 //error handler\
            \cf4 console.\cf5 error\cf4 (\cf6 'Search failed:'\cf2 , \cf4 error)\cf2 ;\
            \cf4 response.\cf8 statusCode \cf4 = \cf10 404\cf2 ;\
            \cf4 response.\cf5 send\cf4 (utilities.\cf5 buildError\cf4 ())\cf2 ;\
        \cf4 \})\cf2 ;\
\
\
\cf4 \})\cf2 ;\
\
}